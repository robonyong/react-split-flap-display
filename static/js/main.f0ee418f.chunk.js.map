{"version":3,"sources":["ReactSplitFlapDisplay/index.js","CodeBlock.tsx","Swatch.tsx","Wrapper.tsx","constants.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["ALPHA","NUMERIC","Text","styled","div","position","color","TextComponent","children","createElement","HalfPanel","Panel","textColor","value","React__default","FlipIn","keyframes","FlipOut","HalfFlipPanel","direction","duration","FlipPanel","background","Character","characterWidth","borderWidth","CharacterComponent","prevValue","step","Wrapper","fontSize","borderColor","defaultProps","characterSet","minLength","padDirection","getMinLengthFill","currValue","length","Array","fill","SplitFlapDisplay","initialValue","join","useState","setPrevValue","setCurrValue","shadowPrevValue","useRef","shadowCurrValue","updateTimer","updateValue","escapedFinalValue","split","map","char","includes","escapeValue","current","currChars","nextValue","idx","currChar","charIdx","indexOf","setTimeout","prevChars","useEffect","clearTimeout","v","key","CodeBlock","Swatch","onChange","showColorPicker","setShowColorPicker","className","onClick","style","defaultInputs","numeric","alpha","alphanumeric","punctuation","typeToCharSetArray","typeToCharSet","App","exampleSet","setExampleSet","setBackground","setBorderColor","setBorderWidth","setCharacterWidth","setFontSize","setMinLength","setPadDirection","setValue","setTextColor","setStep","generateInputHandler","setFn","event","target","generateColorInputHandler","hex","selectedExample","newValue","type","checked","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0ee418f.chunk.js","sourcesContent":["/* eslint-disable */\nimport React__default, { createElement, useState, useRef, useEffect } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst ALPHA = [\n  ' ',\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n];\nconst NUMERIC = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\nconst PUNCTUATION = [\n  '!',\n  '@',\n  '#',\n  '$',\n  '(',\n  ')',\n  '^',\n  '-',\n  '_',\n  '+',\n  '&',\n  '=',\n  ';',\n  ':',\n  '*',\n  \"'\",\n  '\"',\n  ',',\n  '.',\n  '<',\n  '>',\n  '/',\n  '\\\\',\n  '?',\n  'Â°',\n  '%',\n];\n\nconst Text = styled.div`\n  background: ${({ position, color }) =>\n    position === 'top'\n      ? `linear-gradient(${color} 50%, transparent 50%)`\n      : `linear-gradient(transparent 50%, ${color} 50%)`};\n  background-clip: text;\n  -webkit-background-clip: text;\n  text-fill-color: transparent;\n  -webkit-text-fill-color: transparent;\n`;\nconst TextComponent = ({ children, color, position }) =>\n  createElement(Text, { position: position, color: color }, children);\n\nconst HalfPanel = styled.div`\n  position: ${({ position }) => (position === 'top' ? 'relative' : 'absolute')};\n  overflow: hidden;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\nconst Panel = ({ position, textColor, value }) =>\n  React__default.createElement(\n    HalfPanel,\n    { position: position },\n    React__default.createElement(TextComponent, { position: position, color: textColor }, value),\n  );\nconst FlipIn = keyframes`\n  0% {\n    transform: rotateX(-90deg);\n  }\n  50% {\n    transform: rotateX(-90deg);\n  }\n  100% {\n    transform: rotateX(0deg);\n  }\n`;\nconst FlipOut = keyframes`\n  0% {\n    transform: rotateX(0deg);\n  }\n  50% {\n    transform: rotateX(90deg);\n  }\n  100% {\n    transform: rotateX(90deg);\n  }\n`;\nconst HalfFlipPanel = styled(HalfPanel)`\n  position: absolute;\n  animation: ${({ direction }) => (direction === 'in' ? FlipIn : FlipOut)} linear ${({ duration }) => `${duration}s`};\n  animation-fill-mode: forwards;\n  background: ${({ color, direction }) =>\n    direction === 'out'\n      ? `linear-gradient(${color} 50%, transparent 50%)`\n      : `linear-gradient(transparent 50%, ${color} 50%)`};\n  opacity: 1;\n  z-index: 2;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\nconst FlipPanel = ({ background, direction, duration, position, textColor, value }) =>\n  React__default.createElement(\n    HalfFlipPanel,\n    { direction: direction, duration: duration, color: background, position: position },\n    React__default.createElement(TextComponent, { position: position, color: textColor }, value),\n  );\n\nconst Character = styled.div`\n  background: ${({ background }) => background};\n  display: flex;\n  justify-content: center;\n  width: ${({ characterWidth }) => characterWidth || 'initial'};\n  padding: 0.5em;\n  position: relative;\n  &:after {\n    content: ' ';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 50%;\n    z-index: 5;\n    background: transparent;\n    border-bottom: ${({ background, borderWidth }) => `${background} ${borderWidth} solid`};\n  }\n`;\nconst CharacterComponent = ({ background, borderWidth, characterWidth, prevValue, step, textColor, value }) =>\n  createElement(\n    Character,\n    { background: background, borderWidth: borderWidth, characterWidth: characterWidth },\n    createElement(Panel, { position: 'top', background: background, textColor: textColor, value: value }),\n    createElement(Panel, { position: 'bottom', background: background, textColor: textColor, value: prevValue }),\n    prevValue !== value &&\n      createElement(FlipPanel, {\n        direction: 'out',\n        duration: step / 1000,\n        position: 'top',\n        background: background,\n        textColor: textColor,\n        value: prevValue,\n      }),\n    prevValue !== value &&\n      createElement(FlipPanel, {\n        direction: 'in',\n        duration: step / 1000,\n        position: 'bottom',\n        background: background,\n        textColor: textColor,\n        value: value,\n      }),\n  );\n\nconst Wrapper = styled.div`\n  display: flex;\n  color: ${({ color }) => color};\n  font-size: ${({ fontSize }) => fontSize};\n  > * {\n    &:not(:first-child) {\n      border-left: ${({ borderColor, borderWidth }) => `${borderColor} ${borderWidth} solid`};\n    }\n  }\n  box-sizing: border-box;\n`;\nconst defaultProps = {\n  background: '#000000',\n  borderColor: '#dddddd',\n  borderWidth: '1px',\n  characterSet: NUMERIC,\n  characterWidth: '1em',\n  fontSize: '1em',\n  minLength: 5,\n  padDirection: 'left',\n  step: 200,\n  textColor: '#dddddd',\n  value: '94609',\n};\nconst escapeValue = (value, characterSet) =>\n  value\n    .split('')\n    .map((char) => (characterSet.includes(char) ? char : characterSet[0]))\n    .join('');\nconst getMinLengthFill = (currValue, characterSet, minLength) => {\n  if (minLength && currValue.length < minLength) {\n    return Array(minLength - currValue.length).fill(characterSet[0]);\n  }\n  return [];\n};\nconst SplitFlapDisplay = ({\n  background = defaultProps.background,\n  borderColor = defaultProps.borderColor,\n  borderWidth = defaultProps.borderWidth,\n  characterSet = defaultProps.characterSet,\n  characterWidth = defaultProps.characterWidth,\n  fontSize = defaultProps.fontSize,\n  minLength = defaultProps.minLength,\n  padDirection = defaultProps.padDirection,\n  step = defaultProps.step,\n  textColor = defaultProps.textColor,\n  value = defaultProps.value,\n} = defaultProps) => {\n  const initialValue = Array(value.length).fill(characterSet[0]).join('');\n  const [prevValue, setPrevValue] = useState(initialValue);\n  const [currValue, setCurrValue] = useState(initialValue);\n  // persisted vars that inform state\n  const shadowPrevValue = useRef(initialValue);\n  const shadowCurrValue = useRef(initialValue);\n  const updateTimer = useRef(null);\n  const updateValue = () => {\n    const escapedFinalValue = escapeValue(value, characterSet);\n    if (updateTimer.current || shadowPrevValue.current === escapedFinalValue) {\n      return;\n    }\n    shadowPrevValue.current = shadowCurrValue.current;\n    setPrevValue(shadowPrevValue.current);\n    const currChars = shadowCurrValue.current.split('');\n    const finalChars = escapedFinalValue.split('');\n    const nextValue = finalChars\n      .map((char, idx) => {\n        const currChar = currChars[idx];\n        const charIdx = characterSet.indexOf(currChar);\n        const nextChar =\n          currChar === char || (charIdx === 0 && !characterSet.includes(char))\n            ? currChar\n            : characterSet[(charIdx + 1) % characterSet.length];\n        return nextChar;\n      })\n      .join('');\n    shadowCurrValue.current = nextValue;\n    setCurrValue(shadowCurrValue.current);\n    updateTimer.current = setTimeout(() => {\n      updateTimer.current = null;\n      updateValue();\n    }, step);\n  };\n  useEffect(updateValue, []);\n  useEffect(() => {\n    if (updateTimer.current) {\n      clearTimeout(updateTimer.current);\n      updateTimer.current = null;\n    }\n    updateValue();\n  }, [value, characterSet, step]);\n  let prevChars;\n  let currChars;\n  if (padDirection === 'right') {\n    prevChars = [...prevValue.split(''), ...getMinLengthFill(prevValue, characterSet, minLength)];\n    currChars = [...currValue.split(''), ...getMinLengthFill(currValue, characterSet, minLength)];\n  } else {\n    prevChars = [...getMinLengthFill(prevValue, characterSet, minLength), ...prevValue.split('')];\n    currChars = [...getMinLengthFill(currValue, characterSet, minLength), ...currValue.split('')];\n  }\n  return React__default.createElement(\n    Wrapper,\n    { borderColor: borderColor, borderWidth: borderWidth, color: textColor, fontSize: fontSize },\n    prevChars.map((v, idx) =>\n      React__default.createElement(CharacterComponent, {\n        key: `split-flap-${idx}`,\n        background: background,\n        borderWidth: borderWidth,\n        characterWidth: characterWidth,\n        prevValue: v === ' ' ? '\\u2007' : v,\n        step: step,\n        textColor: textColor,\n        value: currChars[idx] === ' ' ? '\\u2007' : currChars[idx],\n      }),\n    ),\n  );\n};\n\nexport default SplitFlapDisplay;\nexport { ALPHA, NUMERIC, PUNCTUATION };\n","import React from 'react';\n\ntype CodeBlockProps = {\n  background: string;\n  borderColor: string;\n  borderWidth: string;\n  characterSet: string;\n  characterWidth: string;\n  fontSize: string;\n  minLength: number;\n  padDirection: string;\n  step: number;\n  textColor: string;\n  value: string;\n};\n\nconst CodeBlock: React.FC<CodeBlockProps> = ({\n  background,\n  borderColor,\n  borderWidth,\n  characterSet,\n  characterWidth,\n  fontSize,\n  minLength,\n  padDirection,\n  step,\n  textColor,\n  value,\n}) => (\n  <pre>\n    {`\n  <SplitFlapDisplay\n    background='${background}'\n    borderColor='${borderColor}'\n    borderWidth='${borderWidth}'\n    characterSet={${characterSet}}\n    characterWidth='${characterWidth}'\n    fontSize='${fontSize}'\n    minLength={${minLength}}\n    padDirection='${padDirection}'\n    step={${step}}\n    textColor='${textColor}'\n    value='${value}'\n  />\n  `}\n  </pre>\n);\n\nexport default CodeBlock;\n","import React, { useState } from 'react';\nimport { SketchPicker, ColorChangeHandler } from 'react-color';\n\ntype SwatchProps = {\n  color: string;\n  onChange: ColorChangeHandler;\n};\n\nconst Swatch = ({ color, onChange }: SwatchProps) => {\n  const [showColorPicker, setShowColorPicker] = useState<boolean>(false);\n\n  return (\n    <div className=\"swatch-container\">\n      <div className=\"swatch\" onClick={() => setShowColorPicker(!showColorPicker)}>\n        <div className=\"color\" style={{ background: color }} />\n      </div>\n      {showColorPicker && (\n        <div className=\"popover\">\n          <div className=\"cover\" onClick={() => setShowColorPicker(false)} />\n          <SketchPicker color={color} onChange={onChange} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Swatch;\n","import React from 'react';\n\nconst Wrapper: React.FC = ({ children }) => <div className=\"wrapper\">{children}</div>;\n\nexport default Wrapper;\n","export interface defaultInputs {\n  numeric: string;\n  alpha: string;\n  alphanumeric: string;\n  punctuation: string;\n}\n\nexport const defaultInputs = {\n  numeric: '94103',\n  alpha: 'TRENTON',\n  alphanumeric: '1 FERRY BUILDING',\n  punctuation: 'TRE-SEA: DELAYED!',\n};\n","import React, { useState, ChangeEvent, SetStateAction } from 'react';\nimport { ColorChangeHandler } from 'react-color';\nimport SplitFlapDisplay, { ALPHA, NUMERIC, PUNCTUATION } from './ReactSplitFlapDisplay';\n\nimport CodeBlock from './CodeBlock';\nimport Swatch from './Swatch';\nimport Wrapper from './Wrapper';\nimport { defaultInputs } from './constants';\n\ntype DefaultInputKeys = keyof defaultInputs;\n\nconst typeToCharSetArray = {\n  numeric: NUMERIC,\n  alpha: ALPHA,\n  alphanumeric: [...ALPHA, ...NUMERIC],\n  punctuation: [...ALPHA, ...PUNCTUATION],\n};\n\nconst typeToCharSet = {\n  numeric: 'NUMERIC',\n  alpha: 'ALPHA',\n  alphanumeric: '[...ALPHA, ...NUMERIC]',\n  punctuation: '[...ALPHA, ...PUNCTUATION]',\n};\n\nconst App = () => {\n  const [exampleSet, setExampleSet] = useState<DefaultInputKeys>('numeric');\n  const [background, setBackground] = useState<string>('#000000');\n  const [borderColor, setBorderColor] = useState<string>('#dddddd');\n  const [borderWidth, setBorderWidth] = useState<string>('1px');\n  const [characterWidth, setCharacterWidth] = useState<string>('1em');\n  const [fontSize, setFontSize] = useState<string>('2em');\n  const [minLength, setMinLength] = useState<number>(defaultInputs.numeric.length);\n  const [padDirection, setPadDirection] = useState<string>('left');\n  const [value, setValue] = useState<string>(defaultInputs.numeric);\n  const [textColor, setTextColor] = useState<string>('#dddddd');\n  const [step, setStep] = useState<number>(200);\n\n  const generateInputHandler = (setFn: SetStateAction<any>) => (event: ChangeEvent<HTMLInputElement>): void =>\n    setFn(event.target.value);\n  const generateColorInputHandler = (setFn: SetStateAction<any>): ColorChangeHandler => (color): void =>\n    setFn(color.hex);\n\n  const onSelect = (event: ChangeEvent<HTMLSelectElement>): void => {\n    const selectedExample = event.target.value as DefaultInputKeys;\n    if (selectedExample !== exampleSet) {\n      const newValue = defaultInputs[selectedExample];\n      setExampleSet(selectedExample);\n      setValue(newValue);\n      setMinLength(newValue.length);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h3>React Split Flap Display</h3>\n      <div className=\"flex-container-vertical\">\n        <Wrapper>\n          <SplitFlapDisplay\n            background={background}\n            borderColor={borderColor}\n            borderWidth={borderWidth}\n            characterSet={typeToCharSetArray[exampleSet]}\n            characterWidth={characterWidth}\n            fontSize={fontSize}\n            minLength={minLength}\n            padDirection={padDirection}\n            step={step}\n            textColor={textColor}\n            value={value}\n          />\n        </Wrapper>\n        <div className=\"flex-container-horizontal\">\n          <div>\n            <Wrapper>\n              <div>\n                <label>\n                  display:&nbsp;\n                  <input value={value} onChange={generateInputHandler(setValue)} />\n                </label>\n              </div>\n              <div>\n                character set:&nbsp;\n                <select value={exampleSet} onChange={onSelect}>\n                  <option value=\"numeric\">0-9</option>\n                  <option value=\"alpha\">A-Z</option>\n                  <option value=\"alphanumeric\">A-Z with 0-9</option>\n                  <option value=\"punctuation\">A-Z with punctuation</option>\n                </select>\n              </div>\n              <div>\n                character width:&nbsp;\n                <input value={characterWidth} onChange={generateInputHandler(setCharacterWidth)} />\n              </div>\n              <div>\n                <label>\n                  min length:&nbsp;\n                  <input type=\"number\" value={minLength} onChange={generateInputHandler(setMinLength)} />\n                </label>\n              </div>\n              <div>\n                <label>\n                  pad direction:&nbsp;\n                  <label>\n                    <input\n                      type=\"radio\"\n                      value=\"left\"\n                      onChange={generateInputHandler(setPadDirection)}\n                      checked={padDirection === 'left'}\n                    />\n                    left\n                  </label>\n                  &nbsp;\n                  <label>\n                    <input\n                      type=\"radio\"\n                      value=\"right\"\n                      onChange={generateInputHandler(setPadDirection)}\n                      checked={padDirection === 'right'}\n                    />\n                    right\n                  </label>\n                </label>\n              </div>\n              <div>\n                <label>\n                  step (ms):&nbsp;\n                  <input type=\"number\" value={step} onChange={generateInputHandler(setStep)} />\n                </label>\n              </div>\n            </Wrapper>\n            <Wrapper>\n              <div>\n                background color:&nbsp;\n                <Swatch color={background} onChange={generateColorInputHandler(setBackground)} />\n              </div>\n              <div>\n                border color:&nbsp;\n                <Swatch color={borderColor} onChange={generateColorInputHandler(setBorderColor)} />\n              </div>\n              <div>\n                text color:&nbsp;\n                <Swatch color={textColor} onChange={generateColorInputHandler(setTextColor)} />\n              </div>\n            </Wrapper>\n            <Wrapper>\n              <div>\n                border width:&nbsp;\n                <input value={borderWidth} onChange={generateInputHandler(setBorderWidth)} />\n              </div>\n              <div>\n                font size:&nbsp;\n                <input value={fontSize} onChange={generateInputHandler(setFontSize)} />\n              </div>\n            </Wrapper>\n          </div>\n          <CodeBlock\n            background={background}\n            borderColor={borderColor}\n            borderWidth={borderWidth}\n            characterSet={typeToCharSet[exampleSet]}\n            characterWidth={characterWidth}\n            fontSize={fontSize}\n            minLength={minLength}\n            padDirection={padDirection}\n            step={step}\n            textColor={textColor}\n            value={value}\n          />\n        </div>\n      </div>\n      <div className=\"link\">\n        <a href=\"https://github.com/robonyong/react-split-flap-display\">github</a>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}