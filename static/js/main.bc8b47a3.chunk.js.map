{"version":3,"sources":["CodeBlock.js","Swatch.js","Wrapper.js","constants.js","App.js","index.js"],"names":["background","borderColor","borderWidth","characterSet","characterWidth","fontSize","step","textColor","value","Swatch","props","state","showColorPicker","this","color","onChange","className","onClick","setState","style","Component","children","defaultInputs","numeric","alpha","alphanumeric","punctuation","typeToCharSetArray","SplitFlapDisplay","NUMERIC","ALPHA","PUNCTUATION","typeToCharSet","App","onSelect","event","exampleSet","target","minLength","length","generateInputHandler","stateKey","padDirection","SplitFlapDisplayPackage","version","Wrapper","type","checked","hex","CodeBlock","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc8b47a3.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({\n  background,\n  borderColor,\n  borderWidth,\n  characterSet,\n  characterWidth,\n  fontSize,\n  step,\n  textColor,\n  value,\n}) => (\n  <pre>\n    {`\n  <SplitFlapDisplay\n    background='${background}'\n    borderColor='${borderColor}'\n    borderWidth='${borderWidth}'\n    characterSet={${characterSet}}\n    characterWidth='${characterWidth}'\n    fontSize='${fontSize}'\n    step={${step}}\n    textColor='${textColor}'\n    value='${value}'\n  />\n  `}\n  </pre>\n);\n","import React, { Component } from 'react';\nimport { SketchPicker } from 'react-color';\n\nexport default class Swatch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showColorPicker: false,\n    };\n  }\n\n  render() {\n    const { color, onChange } = this.props;\n\n    return (\n      <div className=\"swatch-container\">\n        <div\n          className=\"swatch\"\n          onClick={() => this.setState({ showColorPicker: !this.state.showColorPicker })}\n        >\n          <div className=\"color\" style={{ background: color }} />\n        </div>\n        {this.state.showColorPicker && (\n          <div className=\"popover\">\n            <div className=\"cover\" onClick={() => this.setState({ showColorPicker: false })} />\n            <SketchPicker color={color} onChange={onChange} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default ({ children }) => <div className=\"wrapper\">{children}</div>;\n","export const defaultInputs = {\n  numeric: '94103',\n  alpha: 'TRENTON',\n  alphanumeric: '1 FERRY BUILDING',\n  punctuation: 'TRE-SEA: DELAYED!',\n};\n","import React, { Component } from 'react';\nimport SplitFlapDisplay from 'react-split-flap-display';\n\nimport CodeBlock from './CodeBlock';\nimport Swatch from './Swatch';\nimport Wrapper from './Wrapper';\nimport { defaultInputs } from './constants';\n\nimport SplitFlapDisplayPackage from 'react-split-flap-display/package.json';\n\nconst typeToCharSetArray = {\n  numeric: SplitFlapDisplay.NUMERIC,\n  alpha: SplitFlapDisplay.ALPHA,\n  alphanumeric: [...SplitFlapDisplay.ALPHA, ...SplitFlapDisplay.NUMERIC],\n  punctuation: [...SplitFlapDisplay.ALPHA, ...SplitFlapDisplay.PUNCTUATION],\n};\n\nconst typeToCharSet = {\n  numeric: 'SplitFlapDisplay.NUMERIC',\n  alpha: 'SplitFlapDisplay.ALPHA',\n  alphanumeric: '[...SplitFlapDisplay.ALPHA, ...SplitFlapDisplay.NUMERIC]',\n  punctuation: '[...SplitFlapDisplay.ALPHA, ...SplitFlapDisplay.PUNCTUATION]',\n};\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      exampleSet: 'numeric',\n      background: '#000000',\n      borderColor: '#dddddd',\n      borderWidth: '1px',\n      fontSize: '2em',\n      minLength: defaultInputs.numeric.length,\n      padDirection: 'left',\n      value: defaultInputs.numeric,\n      textColor: '#dddddd',\n      step: 200,\n    };\n  }\n\n  onSelect = (event) => {\n    const exampleSet = event.target.value;\n    let value = this.state.value;\n    let minLength = this.state.minLength;\n    if (exampleSet !== this.state.exampleSet) {\n      value = defaultInputs[exampleSet];\n      minLength = value.length;\n    }\n    this.setState({ exampleSet, minLength, value });\n  };\n\n  generateInputHandler = (stateKey) => (event) => this.setState({ [stateKey]: event.target.value });\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h3>React Split Flap Display v{SplitFlapDisplayPackage.version}</h3>\n        <div className=\"flex-container-vertical\">\n          <Wrapper>\n            <SplitFlapDisplay\n              background={this.state.background}\n              borderColor={this.state.borderColor}\n              borderWidth={this.state.borderWidth}\n              characterSet={typeToCharSetArray[this.state.exampleSet]}\n              characterWidth={this.state.characterWidth}\n              fontSize={this.state.fontSize}\n              minLength={this.state.minLength}\n              padDirection={this.state.padDirection}\n              step={this.state.step}\n              textColor={this.state.textColor}\n              value={this.state.value}\n            />\n          </Wrapper>\n          <div className=\"flex-container-horizontal\">\n            <div>\n              <Wrapper>\n                <div>\n                  <label>\n                    display:&nbsp;\n                    <input value={this.state.value} onChange={this.generateInputHandler('value')} />\n                  </label>\n                </div>\n                <div>\n                  character set:&nbsp;\n                  <select value={this.state.exampleSet} onChange={this.onSelect}>\n                    <option value=\"numeric\">0-9</option>\n                    <option value=\"alpha\">A-Z</option>\n                    <option value=\"alphanumeric\">A-Z with 0-9</option>\n                    <option value=\"punctuation\">A-Z with punctuation</option>\n                  </select>\n                </div>\n                <div>\n                  character width:&nbsp;\n                  <input\n                    value={this.state.characterWidth}\n                    onChange={this.generateInputHandler('characterWidth')}\n                  />\n                </div>\n                <div>\n                  <label>\n                    min length:&nbsp;\n                    <input\n                      type=\"number\"\n                      value={this.state.minLength}\n                      onChange={this.generateInputHandler('minLength')}\n                    />\n                  </label>\n                </div>\n                <div>\n                  <label>\n                    pad direction:&nbsp;\n                    <label>\n                      <input\n                        type=\"radio\"\n                        value=\"left\"\n                        onChange={this.generateInputHandler('padDirection')}\n                        checked={this.state.padDirection === 'left'}\n                      />\n                      left\n                    </label>\n                    &nbsp;\n                    <label>\n                      <input\n                        type=\"radio\"\n                        value=\"right\"\n                        onChange={this.generateInputHandler('padDirection')}\n                        checked={this.state.padDirection === 'right'}\n                      />\n                      right\n                    </label>\n                  </label>\n                </div>\n                <div>\n                  <label>\n                    step (ms):&nbsp;\n                    <input\n                      type=\"number\"\n                      value={this.state.step}\n                      onChange={this.generateInputHandler('step')}\n                    />\n                  </label>\n                </div>\n              </Wrapper>\n              <Wrapper>\n                <div>\n                  background color:&nbsp;\n                  <Swatch\n                    color={this.state.background}\n                    onChange={(color) => this.setState({ background: color.hex })}\n                  />\n                </div>\n                <div>\n                  border color:&nbsp;\n                  <Swatch\n                    color={this.state.borderColor}\n                    onChange={(color) => this.setState({ borderColor: color.hex })}\n                  />\n                </div>\n                <div>\n                  text color:&nbsp;\n                  <Swatch\n                    color={this.state.textColor}\n                    onChange={(color) => this.setState({ textColor: color.hex })}\n                  />\n                </div>\n              </Wrapper>\n              <Wrapper>\n                <div>\n                  border width:&nbsp;\n                  <input\n                    value={this.state.borderWidth}\n                    onChange={this.generateInputHandler('borderWidth')}\n                  />\n                </div>\n                <div>\n                  font size:&nbsp;\n                  <input\n                    value={this.state.fontSize}\n                    onChange={this.generateInputHandler('fontSize')}\n                  />\n                </div>\n              </Wrapper>\n            </div>\n            <CodeBlock\n              background={this.state.background}\n              borderColor={this.state.borderColor}\n              borderWidth={this.state.borderWidth}\n              characterSet={typeToCharSet[this.state.exampleSet]}\n              characterWidth={this.state.characterWidth}\n              fontSize={this.state.fontSize}\n              minLength={this.state.minLength}\n              padDirection={this.state.padDirection}\n              step={this.state.step}\n              textColor={this.state.textColor}\n              value={this.state.value}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}